.text:00000000 main:
.text:00000000
.text:00000000 var_10          = -0x10
.text:00000000 var_4           = -4
.text:00000000
; function prologue
; set GP:
.text:00000000                 lui     $gp, (__gnu_local_gp >> 16)
.text:00000004                 addiu   $sp, -0x20
.text:00000008                 la      $gp, (__gnu_local_gp & 0xFFFF)
; save RA to internal stack:
.text:0000000C                 sw      $ra, 0x20+var_4($sp)
; save GP to internal stack. 
; by some reason, this instruction is missing in GCC assembly output:
.text:00000010                 sw      $gp, 0x20+var_10($sp)
; load address of puts() from GP to $t9:
.text:00000014                 lw      $t9, (puts & 0xFFFF)($gp)
; construct address of the text string in $a0:
.text:00000018                 lui     $a0, ($LC0 >> 16)  # "Hello, world!"
; jump to puts() with link register:
.text:0000001C                 jalr    $t9
.text:00000020                 la      $a0, ($LC0 & 0xFFFF)  # "Hello, world!"
; restore RA value:
.text:00000024                 lw      $ra, 0x20+var_4($sp)
; store zero to $v0:
.text:00000028                 move    $v0, $zero
; return:
.text:0000002C                 jr      $ra
; function epilogue:
.text:00000030                 addiu   $sp, 0x20
